---
import { ChevronLeft, ChevronRight } from 'lucide-astro';

// Define carousel items - this could be moved to a CMS or data file later
const carouselItems = [
    {
        image: "https://straymonds.org/wp-content/uploads/2016/09/edc12e1b722728ac1017ddc2250a1b1e.jpg",
        title: "Serving the Altar,<br>Serving God",
        description: "Join the Lingkod Ng Dambana Ministry and be part of our mission to serve the Church and community.",
        buttons: [
            { text: "Learn More", href: "/about", style: "primary" },
            { text: "Join Our Ministry", href: "/join", style: "secondary" }
        ]
    },
    {
        image: "https://www.sfds.org/pictures/2020/1/IMG_1072.JPG",
        title: "Growing in Faith,<br>Serving with Love",
        description: "Experience spiritual growth while serving the Church through our altar serving ministry.",
        buttons: [
            { text: "View Events", href: "/events", style: "primary" },
            { text: "Contact Us", href: "/contact", style: "secondary" }
        ]
    },
    {
        image: "https://www.sfds.org/pictures/2020/1/IMG_1073.JPG",
        title: "United in Service,<br>Strong in Faith",
        description: "Discover the joy of serving God through our vibrant community of altar servers.",
        buttons: [
            { text: "Our Gallery", href: "/gallery", style: "primary" },
        ]
    }
];
---

<section class="relative min-h-screen overflow-hidden">
    <!-- Carousel Container -->
    <div id="hero-carousel" class="relative h-screen">
        {carouselItems.map((item, index) => (
            <div class={`carousel-slide absolute inset-0 transition-all duration-700 ${index === 0 ? 'active' : ''}`}
                 data-index={index}>
                <!-- Background Image with Overlay -->
                <div class="absolute inset-0">
                    <img 
                        src={item.image} 
                        alt="Hero Image" 
                        class="w-full h-full object-cover transform scale-105 transition-transform duration-[2000ms]"
                    />
                    <div class="absolute inset-0 bg-[#205488]/60 mix-blend-multiply"></div>
                    <div class="vignette absolute inset-0"></div>
                </div>

                <!-- Content -->
                <div class="relative h-full flex items-center justify-center">
                    <div class="text-center text-white px-4 sm:px-6 lg:px-8 max-w-5xl mx-auto">
                        <h1 class="text-4xl md:text-6xl font-bold mb-6 leading-tight transition-all duration-700 delay-300"
                            set:html={item.title}>
                        </h1>
                        <p class="text-xl md:text-2xl mb-8 text-gray-100 max-w-3xl mx-auto transition-all duration-700 delay-500">
                            {item.description}
                        </p>
                        <div class="flex flex-col sm:flex-row gap-4 justify-center transition-all duration-700 delay-700">
                            {item.buttons.map(button => (
                                <a href={button.href} class={`btn-${button.style}`}>
                                    {button.text}
                                    {button.style === 'primary' && <span class="ml-2">â†’</span>}
                                </a>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        ))}

        <!-- Navigation Buttons -->
        <button class="absolute left-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-white/10 text-white hover:bg-white/20 transition-all z-10 group"
                id="prev-slide"
                aria-label="Previous slide">
            <ChevronLeft class="w-6 h-6 transition-transform group-hover:-translate-x-1" />
        </button>
        <button class="absolute right-4 top-1/2 -translate-y-1/2 p-2 rounded-full bg-white/10 text-white hover:bg-white/20 transition-all z-10 group"
                id="next-slide"
                aria-label="Next slide">
            <ChevronRight class="w-6 h-6 transition-transform group-hover:translate-x-1" />
        </button>
    </div>
</section>

<style>
    .carousel-slide {
        @apply opacity-0 invisible;
    }
    
    .carousel-slide.active {
        @apply opacity-100 visible;
    }

    .carousel-slide.active img {
        @apply scale-100;
    }

    .carousel-slide.active h1 {
        @apply opacity-100 translate-y-0;
    }

    .carousel-slide.active p {
        @apply opacity-100 translate-y-0;
    }

    .carousel-slide.active div {
        @apply opacity-100 translate-y-0;
    }

    .carousel-slide h1,
    .carousel-slide p,
    .carousel-slide div {
        @apply opacity-0 translate-y-8;
    }

    .vignette {
        background: radial-gradient(
            circle,
            transparent 40%,
            rgba(0, 0, 0, 0.4) 100%
        );
        pointer-events: none;
        z-index: 1;
    }
</style>

<script>
    function setupCarousel() {
        const carousel = document.getElementById('hero-carousel');
        const slides = document.querySelectorAll('.carousel-slide');
        const prevButton = document.getElementById('prev-slide');
        const nextButton = document.getElementById('next-slide');
        let currentSlide = 0;
        let isAnimating = false;
        let autoAdvanceInterval: NodeJS.Timeout | null = null;

        function updateSlide(newIndex: number) {
            if (isAnimating || newIndex === currentSlide) return;
            isAnimating = true;

            // Remove active class from current slide
            slides[currentSlide]?.classList.remove('active');

            // Add active class to new slide
            slides[newIndex]?.classList.add('active');

            currentSlide = newIndex;

            setTimeout(() => {
                isAnimating = false;
            }, 700);
        }

        function nextSlide() {
            const newIndex = (currentSlide + 1) % slides.length;
            updateSlide(newIndex);
        }

        function prevSlide() {
            const newIndex = (currentSlide - 1 + slides.length) % slides.length;
            updateSlide(newIndex);
        }

        function startAutoAdvance() {
            if (!autoAdvanceInterval) {
                autoAdvanceInterval = setInterval(nextSlide, 6000);
            }
        }

        function stopAutoAdvance() {
            if (autoAdvanceInterval) {
                clearInterval(autoAdvanceInterval);
                autoAdvanceInterval = null;
            }
        }

        // Initialize first slide
        slides[0].classList.add('active');

        // Event listeners
        prevButton?.addEventListener('click', prevSlide);
        nextButton?.addEventListener('click', nextSlide);

        // Auto-advance handling
        carousel?.addEventListener('mouseenter', stopAutoAdvance);
        carousel?.addEventListener('mouseleave', startAutoAdvance);

        // Start auto-advance initially
        startAutoAdvance();

        // Clean up on page unload
        return () => {
            stopAutoAdvance();
        };
    }

    // Setup carousel on page load and after transitions
    document.addEventListener('astro:page-load', setupCarousel);
</script> 