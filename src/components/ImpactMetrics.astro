---
import { Users, Church, Heart } from 'lucide-astro';

const metrics = [
    {
        icon: Users,
        value: "50+",
        label: "Active Altar Servers",
        description: "Dedicated youth serving in our parish"
    },
    {
        icon: Church,
        value: "10",
        label: "Parishes in Laguna",
        description: "Serving communities across the region"
    },
    {
        icon: Heart,
        value: "50+",
        label: "Outreach Events",
        description: "Making a difference in our community"
    }
];
---

<div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        {metrics.map((metric) => (
            <div class="relative group">
                <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-8 text-center transform hover:scale-105 transition-all duration-300">
                    <div class="absolute -top-6 left-1/2 -translate-x-1/2">
                        <div class="w-12 h-12 bg-yellow-400 rounded-xl flex items-center justify-center transform rotate-45 group-hover:rotate-0 transition-transform duration-300">
                            <metric.icon class="w-6 h-6 text-[#205488] transform -rotate-45 group-hover:rotate-0 transition-transform duration-300" />
                        </div>
                    </div>
                    <div class="mt-8">
                        <div class="text-4xl font-bold text-white mb-2 counter opacity-100 transform-none md:opacity-0 md:transform md:translate-y-10">
                            {metric.value}
                        </div>
                        <h3 class="text-xl font-semibold text-yellow-400 mb-2">
                            {metric.label}
                        </h3>
                        <p class="text-white/80 text-sm">
                            {metric.description}
                        </p>
                    </div>
                </div>
            </div>
        ))}
    </div>
</div>

<style>
    /* Add subtle floating animation to metrics */
    @media (min-width: 768px) {
        .group {
            animation: float 6s ease-in-out infinite;
        }
        
        .group:nth-child(2) {
            animation-delay: 1s;
        }
        
        .group:nth-child(3) {
            animation-delay: 2s;
        }
    }
    
    @keyframes float {
        0%, 100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-10px);
        }
    }

    /* Counter animation styles */
    @media (min-width: 768px) {
        .counter {
            opacity: 0;
            transform: translateY(10px);
            transition: all 0.6s ease-out;
        }

        .counter.visible {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    function initializeCounters() {
        // Counter animation when in view
        const counters = document.querySelectorAll('.counter');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('visible');
                }
            });
        }, {
            threshold: 0.1
        });

        counters.forEach(counter => {
            // Make sure counters are visible on mobile by default
            if (window.innerWidth < 768) {
                counter.classList.add('visible');
            }
            observer.observe(counter);
        });
    }

    // Initialize on page load and after view transitions
    document.addEventListener('astro:page-load', initializeCounters);
</script> 